{"version":3,"sources":["utils.js","Main.jsx","Jobs/Public.jsx","MultiThread.jsx","Jobs/Private.jsx","Parcels/index.jsx","Parcels/View.jsx","Contracts/index.jsx","Join.jsx","Overview.jsx","Contacts/index.jsx","Contacts/New.jsx","Contacts/Edit.jsx","Labels/index.jsx","App.jsx","serviceWorker.js","index.js","QRReader.jsx","Contracts/New.jsx"],"names":["commafy","list","len","length","slice","join","capitalize","word","split","map","p","toUpperCase","toRadian","degree","Math","PI","distanceBetween","origin","destination","1","lat","lng","2","delta","a","pow","sin","cos","asin","sqrt","chunk","from","size","isStr","arr","Array","to","nxt","splice","push","Box","maxWidth","mx","marginTop","px","Card","Flex","flexDirection","title","style","alignSelf","Button","mainColor","alignItems","Heading","my","creator","useState","pos","setPos","hexs","setHexs","zones","setZones","name","setName","contracts","setContracts","threadMgr","setThreadMgr","web3","Web3","givenProvider","useEffect","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","err","alert","message","getProfile","useCallback","displayName","text","loading","Loader","window","ethereum","request","method","user","Tooltip","placement","Blockie","opts","seed","openBox","box","syncDone","Promise","all","public","get","getSpace","Object","keys","toLowerCase","openSpace","refreshContracts","validContract","post","type","eth","getBlockNumber","expires","zone","addr","id","joinThreadByAddress","thread","getPosts","posts","isContract","filter","_","i","w","theta","start","floor","one","full","polys","rows","row","x","y","poly","center","index","col","every","onPathCreate","console","info","onPathDelete","zoom","TileLayer","url","attribution","FeatureGroup","position","onDrawStart","evt","onDrawStop","onCreated","onDeleted","draw","polyline","polygon","marker","rectangle","circlemarker","circle","shapeOptions","color","Marker","Popup","Polygon","key","includes","positions","onClick","z","Table","toFixed","con","pickup","waypoint","travelTime","dropoff","Form","onSubmit","Input","follow","threadAddr","space","onUpdate","contract","log","revs","out","rev","author","postId","status","setStatus","cards","setCards","updateStatus","watchForJobs","provider","currentProvider","Error","accounts","create","getAccounts","joinThread","inbox","limit","timestamp","awaiting","getConfig","config","links","address","docs","count","cs","_3id","signJWT","payload","error","c","JSON","stringify","scanning","setScanning","data","setData","history","useHistory","QRReader","onScan","match","location","Field","label","required","width","placeholder","value","onChange","target","Icon","props","setLoading","setLog","logger","msg","checkForParcel","guid","waitSync","params","setText","top","setTop","obj","useRef","texts","Grower","Supplier","Supply","Unboxing","Testing","Packaging","Bundling","Drop","Rideshare","Shopping","Payment","Fulfillment","current","addEventListener","svg","contentDocument","querySelector","nodes","querySelectorAll","node","getAttributeNS","desc","idx","undefined","textAlign","padding","left","right","margin","backgroundColor","border","borderRadius","ref","display","setPubKey","setAddr","setBox","setInfo","contacts","setContacts","modalOpen","setModalOpen","toast","load3Box","loadContacts","private","k","query","profileGraphQL","profiles","cp","profile","eth_address","image","name3","copyKey","selection","getSelection","range","document","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","addMessage","secondaryMessage","variant","icon","mt","mr","Modal","isOpen","Text","icononly","mb","path","encodeURI","absolute","justifyContent","overflow","textOverflow","keylink","py","borderTop","borderColor","entries","className","src","names","href","confirm","remove","ToastMessage","Provider","URLSearchParams","useLocation","search","setNames","did","setDID","boxProfile","setBoxProfile","saveText","setSaveText","updateBoxProfile","val","startsWith","DID","existing","Set","saveContact","entry","n","trim","set","parcels","ml","newName","marginRight","Outline","disabled","imageCID","setImageCID","boxLoader","setBoxLoader","contentUrl","txt","test","ipfs","ls","link","height","page","setPage","setLabel","innerGutter","setInnerGutter","outerGutter","setOuterGutter","images","setImages","presets","setters","load","genData","round","cols","ids","genId","resolve","reject","QRCode","toString","errorCorrectionLevel","string","qrs","qr","setter","dim","axis","old","buffer","uuidv1","base58","lbl","datum","initY","qrSize","min","transform","selected","random","xlinkHref","encodeURIComponent","preset","prop","opt","viewBox","ridx","cidx","currentNet","setCurrentNet","setNet","net","getId","mobile","userAgent","currentNetwork","requiredNetwork","notWeb3CapableBrowserMessage","MetaMaskButton","as","noNetworkAvailableMessage","exact","component","Main","Overview","EditContact","NewContact","Contacts","PublicJobs","PrivateJobs","ViewParcel","Parcels","NewContract","Join","Contracts","Labels","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","delay","onError","maxHeight","setType","mark","setMark","r","setBoundsRadius","other","setOther","time","setTime","bond","setBond","couriers","setCouriers","scanner","setScanner","b58","setGUID","ScrollTrigger","register","gsap","permissions","result","state","actual","hashchange","removeEventListener","updateType","textBounds","dragMarker","latlng","pageIcons","pageDescs","navbuttons","onBack","onNext","nextAvail","postToInbox","recipient","app","indent","fontSize","draggable","onDrag","radius","bounds","fill","stroke","textAnchor","parseFloat","ceil","when","contact","cursor","checked","guidBytes","replace","crypto","subtle","digest","hash","Buffer","threadName","createConfidentialThread","addMember","courier"],"mappings":"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","file":"static/js/main.e8c0ce30.chunk.js","sourcesContent":["export const commafy = (list) => {\n  const len = list.length\n  if(len === 0 || len === 1) {\n    return list[0]\n  } else if(len === 2) {\n    return `${list[0]} & ${list[1]}}`\n  } else {\n    return [\n      list.slice(0, len - 1).join(', '),\n      list.slice(-1)[0]\n    ].join(', & ')\n  }\n}\n\nexport const capitalize = (word) => (\n  (word || '').split('-')\n  .map(p => ((p[0] && p[0].toUpperCase()) || '') + p.slice(1))\n  .join('-')\n)\n\n// https://stackoverflow.com/a/43208163\nexport const toRadian = degree => degree * Math.PI / 180\nexport const distanceBetween = (origin, destination) => {\n  const p = {\n    1: { lat: toRadian(origin.lat), lng: toRadian(origin.lng) },\n    2: { lat: toRadian(destination.lat), lng: toRadian(destination.lng) },\n  }\n  const delta = { lat: p[2].lat - p[1].lat, lng: p[2].lng - p[1].lng }\n  const a = (\n    Math.pow(Math.sin(delta.lat / 2), 2)\n    + Math.cos(p[1].lat) * Math.cos(p[2].lat)\n    * Math.pow(Math.sin(delta.lng / 2), 2)\n  )\n  const c = 2 * Math.asin(Math.sqrt(a))\n  const EARTH_RADIUS = 6371000 // meters\n  return c * EARTH_RADIUS\n}\n\nexport const chunk = (from, size) => {\n  const isStr = typeof(from) === 'string'\n  let arr = Array.from(from)\n  let to = []\n  while(arr.length) {\n    const nxt = arr.splice(0, size)\n    to.push(isStr ? nxt.join('') : nxt)\n  }\n  return to\n}","import React from 'react'\nimport { Button, Card, Box, Flex, Heading } from 'rimble-ui'\nimport { Link } from 'react-router-dom'\nimport './App.css'\n\nexport default () => {\n  return <>\n    <Box maxWidth='45em' mx='auto' marginTop='1.5em' px={[3, 3, 4]}>\n      <Card><Flex flexDirection='column'>\n        <h1>The <acronym title='Department of Happiness'>DoH</acronym>'s Ad Hoc Courier Service</h1>\n        <Link to='/overview' style={{ alignSelf: 'center' }}>\n          <Button mainColor='DarkCyan'>Overview</Button>\n        </Link>\n      </Flex></Card>\n    </Box>\n    <Box>\n      <Card maxWidth='25em' mx='auto' marginTop='1.5em' px={[3, 3, 4]}>\n        <Flex alignItems='center'  flexDirection='column'>\n          <Heading>Anyone</Heading>\n          <Link to='/ppl'>\n            <Button mx='auto' my='0.5em'>Manage Contacts</Button>\n          </Link>\n          <Link to='/labels'>\n            <Button mx='auto' my='0.5em'>Print Labels</Button>\n          </Link>\n        </Flex>\n      </Card>\n      <Card maxWidth='25em' mx='auto' marginTop='1.5em'>\n        <Flex alignItems='center' flexDirection='column'>\n          <Heading>Couriers</Heading>\n          <Link to='/jobs/public'>\n            <Button mx='auto' my='0.5em'>Find Public Jobs</Button>\n          </Link>\n          <Link to='/jobs/private'>\n            <Button mx='auto' my='0.5em'>Check Private Jobs</Button>\n          </Link>\n          <Link to='/parcels'>\n            <Button mx='auto' my='0.5em'>Investigate Parcels</Button>\n          </Link>\n          <Link to='/drive'>\n            <Button mx='auto' my='0.5em'>Drive</Button>\n          </Link>\n        </Flex>\n      </Card>\n      <Card maxWidth='25em' mx='auto' marginTop='1.5em' px={[3, 3, 4]}>\n        <Flex alignItems='center'  flexDirection='column'>\n          <Heading>Shippers</Heading>\n          <Link to='/contracts/new'>\n            <Button mx='auto' my='0.5em'>Ship a Parcel</Button>\n          </Link>\n        </Flex>\n      </Card>\n    </Box>\n  </>\n}","import React, { useState, useEffect, useCallback } from 'react'\nimport { Map as LeafletMap, Marker, Popup, TileLayer, Polygon, FeatureGroup } from 'react-leaflet'\nimport { EditControl } from 'react-leaflet-draw'\nimport {\n  Text, Blockie, Card, Flex, Heading,\n  Table, Form, Input, Button, Loader,\n  Icon, Tooltip\n} from 'rimble-ui'\nimport Box from '3box'\n//import 'leaflet/dist/leaflet.css'\nimport 'leaflet-draw/dist/leaflet.draw.css'\nimport Web3 from 'web3'\nimport { distanceBetween } from '../utils'\n\nconst creator = '0xC33290860C1DA6a84195C5cf1575860d3A3ED73d' // to look up zones space\nconst zonesSpace = 'courier-zones'\n\nexport default () => {\n  const [pos, setPos] = useState({ lat: -0.09, lng: 51.505 })\n  const [hexs, setHexs] = useState([])\n  const [zones, setZones] = useState([])\n  const [name, setName] = useState()\n  const [contracts, setContracts] = useState({})\n  const [threadMgr, setThreadMgr] = useState()\n  const web3 = new Web3(Web3.givenProvider)\n\n  useEffect(() => {\n    const success = (pos) => setPos({ lat: pos.coords.latitude, lng: pos.coords.longitude })\n    const error = (err) => alert(`Error Getting Current Position: '${err.message}'`)\n    navigator.geolocation.getCurrentPosition(success, error)\n  }, [])\n\n  const getProfile = useCallback(async () => {\n    const displayName = (text, loading = false) => (\n      <Flex alignItems='center' flexDirection='column'>\n        <Heading>{text}</Heading>\n        {loading && <Loader size='80px'/>}\n      </Flex>\n    )\n\n    try {\n      setName(displayName('Loading Profile…', true))\n      const user = (\n        await window.ethereum.request({ method: 'eth_requestAccounts' })\n      )[0]\n      setName(displayName(\n        <Tooltip message={user} placement='bottom'>\n          <Flex alignItems='center' flexDirection='column'>\n            <Heading>Researching</Heading>\n            <Blockie opts={{ seed: user, size: 50 }}/>\n          </Flex>\n        </Tooltip>,\n        true\n      ))\n      const box = await Box.openBox(user, Web3.givenProvider)\n      setName(displayName('Opened Box…', true))\n      await box.syncDone\n      setName(displayName('Getting Name…', true))\n      await Promise.all([\n        (async () => setName(displayName(\n          `Welcome ${await box.public.get('name')}`\n        )))(),\n        (async () => {\n          let threadMgr = await Box.getSpace(creator, zonesSpace)\n          if(Object.keys(threadMgr).length === 0) {\n            if(user.toLowerCase() === creator.toLowerCase()) {\n              threadMgr = await box.openSpace(zonesSpace)\n            } else {\n              alert(\"Couldn't find the thread manager.\")\n            }\n          }\n          setThreadMgr(threadMgr)\n        })(),\n      ])\n    } catch(err) {\n      alert(`Error Connecting to 3Box: '${err.message}'`)\n      setName(displayName('Loading Failed'))\n    }\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => { getProfile() }, [getProfile])\n\n  const refreshContracts = useCallback(async (zones) => {\n    if(threadMgr) {\n      const validContract = async (post) => (\n        post.type === 'contract'\n        && (await web3.eth.getBlockNumber()) <= post.expires\n      )\n      const contracts = {}\n      for(let zone of zones) {\n        if(!zone.addr) {\n          zone.addr = await threadMgr.public.get(`zone-db-${zone.id}`)\n        }\n        if(zone.addr) {\n          const thread = await threadMgr.joinThreadByAddress(zone.addr)\n          const posts = await thread.getPosts()\n          const isContract = await Promise.all(posts.map(validContract))\n          contracts[zone.id] = posts.filter((_, i) => isContract[i])\n        }\n      }\n      setContracts(contracts)\n    }\n  }, [threadMgr])\n\n  useEffect(() => { refreshContracts(zones) }, [refreshContracts, zones])\n\n  useEffect(() => {\n    const w = 0.015\n    const theta = 2 * Math.PI / 6\n    const start = {\n      row: Math.floor(pos.lng / (2 * w)),\n      col: Math.floor(pos.lat / (2 * w * Math.sin(theta))),\n    }\n    const rows = 12\n    const cols = 35\n    const one = {\n      width: 2 * w * Math.sin(theta), height: 2 * w,\n    }\n    const full = {\n      width: cols * one.width, height: rows * one.height,\n    }\n    const polys = (\n      [...new Array(rows * cols)].map((_, i) => {\n        const row = Math.floor(i / rows)\n        const p = {\n          x: (\n            pos.lng + row * 1 * w * Math.sin(theta)\n            - (full.width / 4 - one.width / 2)\n          ),\n          y: (\n            pos.lat + (i % rows) * 3 * w\n            - (3 * full.height / 4 + one.height / 2)\n          ),\n        }\n        if(row % 2 === 1) {\n          p.y += 3 * w * Math.cos(theta)\n        }\n        const poly = [\n          [p.y - w, p.x],\n          [p.y - w * Math.cos(theta), p.x + w * Math.sin(theta)],\n          [p.y + w * Math.cos(theta), p.x + w * Math.sin(theta)],\n          [p.y + w, p.x],\n          [p.y + w * Math.cos(theta), p.x - w * Math.sin(theta)],\n          [p.y - w * Math.cos(theta), p.x - w * Math.sin(theta)],\n        ]\n        poly.center = { lat: p.y, lng: p.x }\n        poly.index = { row: start.row + row, col: start.col + i % cols }\n        poly.id = `(${poly.index.row},${poly.index.col})`\n        poly.contracts = []\n        return poly\n      })\n    )\n    setHexs(polys)\n\n    const r = w * 10\n    const zones = polys.filter((poly) => (\n      poly.every((p) => (\n        Math.sqrt(Math.pow(p[1] - pos.lng, 2) + Math.pow(p[0] - pos.lat, 2)) <= r\n      ))\n    ))\n    setZones(zones)\n  }, [pos])\n\n  const onPathCreate = console.info\n  const onPathDelete = console.info\n  const onDrawStop = (evt) => {\n    console.info('DSTP', evt)\n  }\n  const onDrawStart = (evt) => {\n    console.info('DSTRT', evt)\n  }\n\n  return (\n    <Flex alignItems='center' flexDirection='column'>\n      {name &&\n        <Card><Heading>{name}</Heading></Card>\n      }\n      <Heading>#1. Select Your Availability Zone</Heading>\n      <LeafletMap center={pos} zoom={11}>\n        <TileLayer\n          url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        <FeatureGroup>\n          <EditControl\n            position='topleft'\n            onDrawStart={onDrawStart}\n            onDrawStop={onDrawStop}\n            onCreated={onPathCreate}\n            onDeleted={onPathDelete}\n            draw={{\n              polyline: false,\n              polygon: false,\n              marker: false,\n              rectangle: false,\n              circlemarker: false,\n              circle: {\n                shapeOptions: { color: '#FF0000AA' },\n              },\n            }}\n          />\n        </FeatureGroup>\n        <Marker position={pos}>\n          <Popup>You are here.</Popup>\n        </Marker>\n        {hexs.map((p, i) => (\n          <Polygon key={i}\n            color={\n              !zones.includes(p)\n              ? '#AF05F722'\n              : (p.addr ? '#048A0999' : '#FF7B0099')\n            }\n            positions={p}\n            onClick={() => {\n              setZones((zones) => {\n                const select = !zones.includes(p)\n                if(select) {\n                  return [p, ...zones]\n                } else {\n                  return zones.filter(z => z !== p)\n                }\n              })\n            }}\n          />\n        ))}\n      </LeafletMap>\n      <Table>\n        <thead><tr>\n          <th>Zone ID</th>\n          <th># of Open Contracts</th>\n          <th>🕊 to Center</th>\n        </tr></thead>\n        <tbody>\n          {zones.map((zone) => (\n            <tr key={zone.id}>\n              <td>{zone.id}</td>\n              <td>{zone.contracts.length}</td>\n              <td>{(distanceBetween(pos, zone.center) / 1000).toFixed(2)}km</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      <Table>\n        <thead><tr>\n          <th>🕊 to Pickup Waypoint</th>\n          <th>Waypoint to Sender</th>\n          <th>🕊 Pickup to Dropoff Waypoint</th>\n          <th>Waypoint to Recipient</th>\n          <th>Bid</th>\n        </tr></thead>\n        <tbody>\n          {zones.map((zone) => (\n            (contracts[zone.id] || []).map((con) => (\n              <tr id={zone.id} key={zone.id}>\n                <td>{con.pickup.waypoint}</td>\n                <td>{con.pickup.travelTime}</td>\n                <td>{con.dropoff.waypoint + con.pickup.waypoint}</td>\n                <td>{con.dropoff.travelTime}</td>\n                <td>\n                  <Form onSubmit={alert}>\n                    <Input type='number' name='bid' />\n                    <Button>Bid</Button>\n                  </Form>\n                </td>\n              </tr>\n            ))\n          ))}\n        </tbody>\n      </Table>\n    </Flex>\n  )\n}\n","export const follow = async (threadAddr, { space, onUpdate }) => {\n  const contract = await space.joinThreadByAddress(threadAddr)\n\n  if(onUpdate) {\n    contract.onUpdate(console.log)\n  }\n\n  const revs = await contract.getPosts()\n  const out = {}\n  for(let rev of revs) {\n    out[rev.author] = { id: rev.postId, ...rev.message }\n  }\n  return out\n}\n","import React, { useState, useEffect, useCallback } from 'react'\nimport Box from '3box'\nimport { Loader, Flex, Heading, Card } from 'rimble-ui'\nimport Web3 from 'web3'\nimport IdentityWallet from 'identity-wallet'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\nimport { Resolver } from 'did-resolver'\nimport { follow } from '../MultiThread'\n\nexport default () => {\n  const [status, setStatus] = useState({\n    text: 'Initializing…', color: 'blue'\n  })\n  const [cards, setCards] = useState([])\n  const updateStatus = (text, color) => (\n    setStatus({ text, color })\n  )\n\n  const watchForJobs = useCallback(async () => {\n    try {\n      let provider = Web3.givenProvider\n      if(!provider) {\n        provider = window.web3 && window.web3.currentProvider\n      }\n      if(!provider) {\n        throw new Error(\"Couldn't Find an Ethereum Provider.\\n\\nCan't connect to databases.\")\n      }\n      const web3 = new Web3(provider)\n      console.info('ACCT', web3.eth.accounts.create())\n      updateStatus(`Getting Address…`, 'pink')\n      const user = (await web3.eth.getAccounts())[0]\n      updateStatus(`Opening 3Box: ${user}…`, 'orange')\n      const box = await Box.openBox(user, provider)\n      updateStatus(`Got 3Box…`, 'green')\n      const space = await box.openSpace('courier')\n      updateStatus(`Got Courier Space…`, 'blue')\n      const inbox = await space.joinThread('inbox')\n      updateStatus(`Got Inbox Thread…`, 'red')\n      const limit = 20\n      const posts = await inbox.getPosts({ limit })\n      updateStatus(`Got ${posts.length} Entr${posts.length === 1 ? 'y' : 'ies'}…`, 'blue')\n\n      //for(let { postId: id } of posts) inbox.deletePost(id)\n\n      // const getConsent = async ({ type, origin, spaces }) => {\n      //   // For testing purposes a function that just returns\n      //   // true can be used. In production systems the user\n      //   // should be prompted for input.\n      //   return true\n      // }\n      // const wallet = new IdentityWallet(getConsent, { ethereumAddress: user })\n      // console.info('MSG', await wallet.encrypt(\"message\", 'courier'))\n\n      for(let { message, author, timestamp, postId: id } of posts) {\n        if(message.awaiting) {\n          const config = await Box.getConfig(author)\n          updateStatus(`Getting 3Box…`, 'green')\n          const box = await Box.openBox(config.links[0].address, provider)\n          updateStatus(`Got 3Box.`, 'green')\n          const space = await box.openSpace('courier')\n          updateStatus(`Got Parcels Space…`, 'blue')\n          const docs = await follow(message.awaiting, { space, onUpdate: () => {\n            console.info('UPDT')\n          } })\n          const count = Object.keys(docs).length\n          updateStatus(`Got ${count} Author${count === 1 ? '' : 's'}…`, 'blue')\n          setCards(cs => [docs, ...cs])\n          console.info(await box._3id.signJWT(\n            { payload: 'test' }, { space: 'courier'  }\n          ))\n        } else if(message.contract) {\n          console.info('CTCT', message)\n        } else {\n          console.error('Unknown Inbox Post Type', message)\n        }\n      }\n    } catch(err) {\n      console.error(err)\n      alert(err.message)\n    }\n    updateStatus('Done')    \n  }, [])\n\n  useEffect(() => { watchForJobs() }, [watchForJobs])\n\n  return (\n    <Flex alignItems='center' flexDirection='column'>\n      <Heading>Private Jobs</Heading>\n      {status &&\n        <Flex alignItems='center' flexDirection='column'>\n          <Heading>{status.text}</Heading>\n          {status.color && <Loader color={status.color}/>}\n        </Flex>\n      }\n      {cards.map((c, i) => (\n        <Card key={i}>{JSON.stringify(c)}</Card>\n      ))}\n    </Flex>\n  )\n}","import React, { useState } from 'react'\nimport {\n  Tooltip, Button, Card, Icon,\n  Flex, Heading, Field, Input\n} from \"rimble-ui\"\nimport { useHistory } from 'react-router-dom'\nimport QRReader from '../QRReader'\n\nexport default () => {\n  const [scanning, setScanning] = useState(false)\n  const [data, setData] = useState()\n  const history = useHistory()\n\n  const onScan = (data) => {\n    if(data) {\n      setData(data)\n      const match = data.match(/^https?:\\/\\/(pkg|sw).dhappy.org(\\/cel\\/([^/]*)(\\/(.+))?$)/)\n      console.info(data, match)\n      if(match) {\n        setScanning(false)\n        setData(match[3])\n        if(match[1] === 'pkg') {\n          history.push(match[2])\n        } else {\n          window.location = match[0]\n        }\n      }\n    }\n  }\n\n  return (\n    <Flex alignItems='center' flexDirection='column'>\n      {scanning\n        ? (\n          <QRReader onScan={onScan}/>\n        )\n        : (\n          <Field label=\"Package ID\">\n            <Flex alignItems='center' flexDirection='row'>\n              <Input type='text' required={true}\n                width='20em'\n                placeholder='128 bits base58 encoded'\n                value={data} onChange={evt => setData(evt.target.value)}\n              />\n              <Tooltip message='Read QR Code'>\n                <Button onClick={() => setScanning(true)}>\n                  <Icon name='Pages'/>\n                </Button>\n              </Tooltip>\n            </Flex>\n          </Field>\n        )\n      }\n    </Flex>\n  )   \n}","import React, { useState, useEffect, useCallback } from 'react'\nimport { Flex, Heading, Button, Input, Card, Loader } from 'rimble-ui'\nimport { HashLink as Link } from 'react-router-hash-link'\nimport { Redirect } from 'react-router-dom'\nimport Box from '3box'\nimport Web3 from 'web3'\n\nexport default (props) => {\n  const [loading, setLoading] = useState(false)\n  const [log, setLog] = useState([])\n  const logger = (msg) => setLog(log => [...log, msg])\n\n  const checkForParcel = useCallback(async (guid) => {\n    setLoading(true)\n    const user = (\n      await window.ethereum.request({ method: 'eth_requestAccounts' })\n    )[0]\n    logger(`Got Address: ${user}`)\n    const box = await Box.openBox(user, Web3.givenProvider)\n    logger(`Awaiting 3Box…`)\n    await box.waitSync\n    logger(`Got 3Box…`)\n    const space = await box.openSpace('courier-parcels')\n    logger(`Got Courier Space…`)\n    const inbox = await space.joinThread(`thread-${guid}`)\n    logger(`Got ${guid} Thread…`)\n    const limit = 10\n    const posts = await inbox.getPosts({ limit })\n    logger(`Got ${posts.length} Entr${posts.length === 1 ? 'y' : 'ies'}…`)\n    setLoading(false)\n  }, [])\n\n  useEffect(() => { checkForParcel(props.match.params.guid) }, [])\n\n  return (\n    <Flex alignItems='center' flexDirection='column'>\n      <Heading>Package Viewer</Heading>\n      <Heading>{props.match.params.guid}</Heading>\n\n      {loading && <Loader/>}\n\n      <ul>\n        {log.map((msg, i) => <li key={i}>{msg}</li>)}\n      </ul>\n    </Flex>\n  )\n}","import React, { useEffect, useState, useCallback } from 'react'\n\nexport default () => {\n  return <h1>Contracts</h1>\n}","import React from 'react'\n\nexport default () => {\n  return <h1>Join</h1>\n}","import React, { useEffect, useRef, useState } from 'react';\n\nexport default () => {\n  const [text, setText] = useState()\n  const [name, setName] = useState()\n  const [top, setTop] = useState('1em')\n  const obj = useRef(null)\n\n  const texts = {\n    Grower: <p>Produces the raw materials for production of the substance.</p>,\n    Supplier: <p>Processes the raw materials into a consumable form.</p>,\n    Supply: <p>The final product is a large quantity of the consumable.</p>,\n    Unboxing: <>\n      <p>The plug receives a part of the supply and measures the amount received.</p>\n      <p><i>This is recorded for potential disputes with the supplier.</i></p>\n    </>,\n    Testing: <>\n      <p>The plug performs available tests on the supply.</p>\n      <p><i>This is recorded for the customer and supplier.</i></p>\n    </>,\n    Packaging: <>\n      <p>The plug divides the supply into smaller units.</p>\n      <p><i>Each packaging is recorded for inclusion in the inventory.</i></p>\n    </>,\n    Bundling: <p>Packages are labeled with GUIDs and gathered in a locked bundle.</p>,\n    Drop: <p>A courier picks up the bundle.</p>,\n    Rideshare: <>\n      <p>Customers select their pick-up and destination areas.</p>\n    </>,\n    Shopping: <>\n      <p>On an in-car tablet, they communicate with a plug as to inventory.</p>\n      <p><i>The shop includes the testing and packaging recordings for each parcel.</i></p>\n    </>,\n    Payment: <p>Payment for a parcel is transmitted via IOTA.</p>,\n    Fulfillment: <p>The courier gives the customer their purchase.</p>,\n  }\n\n  const svgEvents = () => {\n    obj.current.addEventListener(\n      'load',\n      () => {\n        let svg = obj.current.contentDocument.querySelector('svg')\n        if(!svg) { alert(\"Couldn't find SVG.\") }\n        let nodes = svg.querySelectorAll(\"[*|label='Icons'] > *\")\n        console.info(nodes)\n        if(!nodes || nodes.length === 0) { alert(\"Couldn't find nodes.\") }\n        const ns = 'http://www.inkscape.org/namespaces/inkscape'\n        for(let node of nodes) {\n          const name = node.getAttributeNS(ns, 'label')\n          let desc, idx = 0\n          for(let key in texts) { // relies on non-standard order maintenance\n            desc = texts[key]\n            if(key === name) break\n            idx++\n          }\n          if(idx === Object.keys(texts).length) {\n            desc = undefined\n          }\n\n          let marginTop = '20em'\n          const row = Math.floor(idx / 3)\n          switch(row) {\n            case 0: marginTop = '30%'; break\n            case 1: marginTop = '15%'; break\n            case 2: marginTop = '25em'; break\n            case 3: marginTop = '65%'; break\n            default: marginTop = `${row * 25}em`\n          }\n\n          node.addEventListener(\n            'mouseover',\n            () => {\n              if(!desc) {\n                alert(`Couldn't Find: ${name}`)\n              } else {\n                setName(name)\n                setText(desc)\n                setTop(marginTop)\n              }\n            },\n            true\n          )\n          node.addEventListener(\n            'mouseout',\n            () => {\n              setName(undefined)\n              setText(undefined)\n            },\n            true\n          )\n        }\n      },\n      true\n    )\n  }\n  useEffect(svgEvents, [])\n\n  const hide = () => {\n    setText(undefined)\n  }\n\n  return <>\n    {text && (\n      <div onClick={hide} style={{ textAlign: 'center', padding: '1em', left: 0, right: 0, position: 'absolute', margin: 'auto', maxWidth: '45em', top: top, backgroundColor: 'yellow', border: '2px solid black', borderRadius: '1.5em' }}>\n        <h1>{name}</h1>\n        {text}\n      </div>\n    )}\n    <object id='chain' data='chain.svg' ref={obj} style={{ display: 'block', maxWidth: '45em', margin: 'auto' }}/>\n  </>\n}","import React, { useState, useRef, useEffect } from 'react'\nimport {\n  Box as LayoutBox, Flex, Heading, Text,\n  Button, Icon, Input, ToastMessage,\n  Modal, Card, Table, Loader\n} from 'rimble-ui'\nimport { HashLink as Link } from 'react-router-hash-link'\nimport Box from '3box'\nimport Web3 from 'web3'\nimport { commafy } from '../utils'\n\nexport default () => {\n  const [pubkey, setPubKey] = useState()\n  const [name, setName] = useState('')\n  const [addr, setAddr] = useState()\n  const [box, setBox] = useState()\n  const [info, setInfo] = useState()\n  const [contacts, setContacts] = useState()\n  const [modalOpen, setModalOpen] = useState(false)\n  const url = useRef(null)\n  const toast = useRef(null)\n\n  const load3Box = async () => {\n    try {\n      let provider = Web3.givenProvider\n      if(!provider) {\n        provider = window.web3 && window.web3.currentProvider\n      }\n      if(!provider) {\n        throw new Error(\"Couldn't Find an Ethereum Provider.\\n\\nCan't connect to databases.\")\n      }\n      const web3 = new Web3(provider)\n      const user = (await web3.eth.getAccounts())[0]\n      setAddr(user)\n      setBox(await Box.openBox(user, web3.currentProvider))\n    } catch(err) {\n      alert(err.message)\n    }\n  }\n\n  useEffect(() => { load3Box() }, [])\n\n  const loadContacts = async () => {\n    if(box) {\n      const contacts = await box.openSpace('courier-contacts')\n      await contacts.syncDone\n      setContacts(contacts)\n      const info = await contacts.private.all()\n      setInfo(info)\n      const keys = `[${Object.keys(info).map(k => `\"${k}\"`).join(',')}]`\n      const query = (\n        `{ profiles(ids: ${keys}) { name eth_address image } }`\n      )\n      const profiles = (await Box.profileGraphQL(query)).profiles\n      setInfo((info) => {\n        let cp = {...info}\n        for(let profile of profiles) {\n          cp[profile.eth_address].image = profile.image\n          cp[profile.eth_address].name3 = profile.name\n        }\n        return cp\n      })\n    }\n  }\n\n  useEffect(() => { loadContacts() }, [box])\n\n  const getPubKey = async () => {\n    try {\n      const accounts = (\n        await window.ethereum.request({ method: 'eth_requestAccounts' })\n      )\n      setAddr(accounts[0])\n      setPubKey(await window.ethereum.request({\n        jsonrpc: '2.0',\n        method: 'eth_getEncryptionPublicKey',\n        params: [accounts[0]],\n        from: accounts[0],\n      }))\n    } catch(err) {\n      alert(err.message)\n    }\n  }\n\n  const copyKey = () => {\n    try {\n      const selection = window.getSelection()\n      const range = document.createRange()\n      range.selectNodeContents(url.current)\n      selection.removeAllRanges()\n      selection.addRange(range)\n      document.execCommand('copy')\n      selection.removeAllRanges()\n\n      toast.current.addMessage('Copied to Clipboard', {\n        secondaryMessage: 'URL is ready to paste…',\n        variant: 'default',\n        icon: 'Assignment',\n      })\n    } catch(err) {\n      alert(err.message)\n    }\n  }\n\n  const keylink = () => {\n    const path = `/ppl/new?alias=${encodeURI(name)}&address=${addr}`\n    const absolute = `https://pkg.dhappy.org/#${path}`\n\n    return <>\n      <Input placeholder='What do they call you?'\n        value={name} onChange={evt => setName(evt.target.value)}\n      />\n      {name && <>\n        <Text>To invite contacts, send them this:</Text>\n        <Flex alignItems='center' justifyContent='center' flexDirection='row'>\n          <Link to={path} ref={url} style={{overflow: 'hidden', textOverflow: 'ellipsis' }}>{absolute}</Link>\n          <Button onClick={copyKey} title='Copy to Clipboard' mx={2} size='small'>\n            <Icon name='Assignment'/>\n          </Button>\n        </Flex>\n      </>}\n    </>\n  }\n\n  return (\n    <Flex alignItems='center' flexDirection='column' position='relative'>\n      <Heading>Contacts</Heading>\n\n      <Button onClick={() => setModalOpen(true)} icon='Share'\n        position='absolute' top={0} right={0} mt={3} mr={3}\n        title='Invite Contacts'\n      />\n      <Modal isOpen={modalOpen}>\n        <Card p={0}>\n          <Button.Text icononly icon='Close' color='moon-gray'\n            position='absolute' top={0} right={0} mt={3} mr={3}\n            onClick={() => setModalOpen(false)} title='Close'\n          />\n\n          <LayoutBox p={4} mb={3}>\n            <Heading>Invitation Link</Heading>\n            {keylink()}\n          </LayoutBox>\n\n          <Flex px={4} py={3} borderTop={1}\n            borderColor='#E8E8E8' justifyContent='flex-end'\n          >\n            <Button onClick={() => { setPubKey(); setModalOpen(false) }}\n            >Done</Button>\n          </Flex>\n        </Card>\n      </Modal>\n\n      {!info\n        ? (\n          <Card><Flex alignItems='center' flexDirection='column'>\n            <Text>Loading Contacts</Text><Loader size='large' mt={3}/>\n          </Flex></Card>\n        )\n        : (Object.keys(info).length === 0\n          ? <Heading>No Contacts</Heading>\n          : (\n            <Table>\n              <thead><tr>\n                <th>Avatar</th><th>Names</th><th>3Box Name</th><th>Actions</th>\n              </tr></thead>\n              <tbody>\n                {Object.entries(info).map(([addr, info]) => (\n                  <tr key={addr}>\n                    <td>{info.image && <img className='avatar' src={`//ipfs.io/ipfs/${info.image}`}/>}</td>\n                    <td title={`Public Key: ${info.key}`}>{commafy(info.names)}</td>\n                    <td><a href={`//3box.io/${addr}`} target='_blank' title='3Box Profile'>{info.name3}</a></td>\n                    <td>\n                      <Link to={`/contacts/${addr}/edit`}>\n                        <Button icon='Edit' mx={1}>Edit</Button>\n                      </Link>\n                      <Button variant='danger' icon='Delete' mx={1}\n                        onClick={() => {\n                          if(window.confirm(`Really Delete: ${commafy(info.names)}?`)) {\n                            contacts.private.remove(addr)\n                            setInfo(info => {\n                              const cp = {...info}\n                              delete(cp[addr])\n                              return cp\n                            })\n                          }\n                        }}\n                      >Delete</Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          )\n        )\n      }\n      <ToastMessage.Provider ref={toast}/>\n    </Flex>\n  )\n}","import React, { useState, useEffect, useCallback } from 'react'\nimport { Heading, Button, Input, Card, Loader, Flex } from 'rimble-ui'\nimport { HashLink as Link } from 'react-router-hash-link'\nimport { useLocation, Redirect } from 'react-router-dom'\nimport Box from '3box'\nimport Web3 from 'web3'\n\nconst useQuery = () => new URLSearchParams(useLocation().search)\n\nexport default () => {\n  const query = useQuery()\n  const [names, setNames] = useState([query.get('alias')])\n  const [addr] = useState(query.get('address'))\n  const [did, setDID] = useState()\n  const [contacts, setContacts] = useState()\n  const [box, setBox] = useState()\n  const [boxProfile, setBoxProfile] = useState(\n    <Loader display='inline' title='Opening 3Box…'/>\n  )\n  const [saveText, setSaveText] = useState('Save')\n\n  let provider = Web3.givenProvider\n  if(!provider) {\n    provider = window.web3 && window.web3.currentProvider\n  }\n  const web3 = new Web3(provider)\n\n  const load3Box = useCallback(async () => {\n    try {\n      const user = (await web3.eth.getAccounts())[0]\n      const box = await Box.openBox(user, web3.currentProvider)\n      setBox(box)\n    } catch(err) {\n      alert(err.message)\n    }\n  }, [])\n\n  useEffect(() => { load3Box() }, [load3Box])\n\n  const updateBoxProfile = useCallback(async () => {\n    try {\n      setBoxProfile(<Loader color='orange' display='inline' title='Getting 3Box Profile…'/>)\n      const profile = await Box.getProfile(addr)\n      const entries = Object.entries(profile || {}).filter(\n        ([key, val]) => !key.startsWith('proof_') && typeof(val) !== 'object'\n      )\n      setBoxProfile(\n        (entries.length === 0)\n        ? <ul><li><i>Empty</i></li></ul>\n        : (\n          <ul>\n            {entries\n              .map(([key, val]) => (\n                <li key={key}><b>{key}:</b> {JSON.stringify(val)}</li>\n              ))\n            }\n          </ul>\n        )\n      )\n      console.info(provider, web3.currentProvider)\n      console.info('DID', (await Box.openBox(addr, web3.currentProvider)).DID)\n      setDID((await Box.openBox(addr, web3.currentProvider)).DID)\n    } catch(err) {\n      alert(err.message)\n    }\n  }, [addr])\n\n  useEffect(() => { updateBoxProfile() }, [updateBoxProfile])\n\n  const loadContacts = useCallback(async () => {\n    if(box) {\n      const contacts = await box.openSpace('courier-contacts')\n      await contacts.syncDone\n      setContacts(contacts)\n\n      const existing = await contacts.private.get(addr)\n      if(existing) {\n        setNames(names => [...(new Set(\n          [...names, ...existing.names]\n        ))])\n      }\n    }\n  }, [box])\n\n  useEffect(() => { loadContacts() }, [loadContacts])\n\n  const saveContact = async () => {\n    if(!contacts) {\n      console.error(\"Contact space isn't set\")\n    } else {\n      setSaveText(<Loader color='white'/>)\n      const entry = {\n        did, address: addr,\n        names: [...new Set(names.filter(n => n.trim() !== ''))],\n      }\n      await contacts.private.set(addr, entry)\n      await contacts.private.set(did, entry)\n      setSaveText(<Loader color='green'/>)\n\n      // Before a thread can be opened, the space it belongs to\n      // has to have been opened by the specific user\n      const other = await Box.openBox(addr, Web3.givenProvider)\n      const parcels = await box.openSpace('courier-parcels')\n      await parcels.syncDone\n      setSaveText('Done')\n    }\n  }\n\n  return (\n    <Flex flexDirection='column'><Card>\n      <Heading>Create a New Contact</Heading>\n      \n      <ul>\n        <li>\n          <b>Names:</b>\n          <ul>\n            {names.map((name, idx) => (\n              <li key={idx}>\n                <Input ml={2} value={name} my={2}\n                  onChange={(evt) => {\n                    const newName = evt.target.value\n                    setNames(\n                      (names) => [\n                        ...names.slice(0, idx),\n                        newName,\n                        ...names.slice(idx + 1)\n                      ]\n                    )\n                  }}\n                />\n                <Button title='Delete' mx={2} variant='danger' icon='Delete'\n                  onClick={() => setNames(names => {\n                    if(names.length === 1) {\n                      return ['']\n                    } else {\n                      return [...names.slice(0, idx), ...names.slice(idx + 1)]\n                    }\n                  })}\n                />\n                <Button title='Add' icon='Add'\n                  onClick={() => setNames(names => {\n                    return [...names.slice(0, idx + 1), '', ...names.slice(idx + 1)]\n                  })}\n                />\n              </li>\n            ))}\n          </ul>\n        </li>\n        <li><Flex flexDirection='row'>\n          <b style={{marginRight: '0.5em'}}>Decentralized ID:</b> {did ? did : <Loader/>}\n        </Flex></li>\n        <li><b>ETH Address:</b> {addr}</li>\n        <li>\n          <Flex flexDirection='row'>\n            <b>3Box Profile:</b> {!boxProfile && <Loader/>}\n          </Flex>\n          {boxProfile}\n        </li>\n      </ul>\n\n      <Flex justifyContent='flex-end'>\n        <Link to='/contacts'>\n          <Button.Outline mx={2}>Cancel</Button.Outline>\n        </Link>\n        <Button onClick={saveContact} variant='success  '\n          disabled={\n            names.filter(n => n !== '').length === 0\n            || saveText !== 'Save'\n          }\n        >{saveText}</Button>\n        {saveText === 'Done' && <Redirect to='/contacts'/>}\n      </Flex>\n    </Card></Flex>\n  )\n}","import React, { useState, useEffect, useCallback } from 'react'\nimport { Flex, Heading, Button, Input, Card, Loader } from 'rimble-ui'\nimport { HashLink as Link } from 'react-router-hash-link'\nimport { Redirect } from 'react-router-dom'\nimport Box from '3box'\nimport Web3 from 'web3'\n\nexport default (props) => {\n  const [names, setNames] = useState()\n  const [addr] = useState(props.match.params.address)\n  const [contacts, setContacts] = useState()\n  const [box, setBox] = useState()\n  const [imageCID, setImageCID] = useState()\n  const [boxLoader, setBoxLoader] = useState(\n    <Loader display='inline' title='Opening 3Box…'/>\n  )\n  const [boxProfile, setBoxProfile] = useState()\n  const [saveText, setSaveText] = useState('Save')\n\n  const load3Box = async () => {\n    const user = (\n      await window.ethereum.request({ method: 'eth_requestAccounts' })\n    )[0]\n    setBox(await Box.openBox(user, Web3.givenProvider))\n  }\n\n  useEffect(() => { load3Box() }, [])\n\n  const linkLink = (txt) => {\n    if(/^https?:\\/\\//.test(txt)) {\n      return <a href={txt}>{txt}</a>\n    } else {\n      return txt\n    }\n  }\n\n  const updateBoxProfile = useCallback(async () => {\n    setBoxLoader(<Loader color='orange' display='inline' title='Getting 3Box Profile…'/>)\n    const profile = await Box.getProfile(addr)\n    if(profile.image && profile.image.length > 0) {\n      setImageCID(profile.image[0].contentUrl['/'])\n    }\n    setBoxProfile(\n      (!profile || Object.keys(profile).length === 0)\n      ? <i>Empty</i>\n      : (\n        <ul>\n          {Object.entries(profile)\n          .filter(([key, val]) => !key.startsWith('proof_') && typeof(val) !== 'object')\n          .map(([key, val]) => (\n            <li key={key}><b>{key}:</b> {linkLink(val)}</li>\n          ))}\n        </ul>\n      )\n    )\n  }, [])\n\n  useEffect(() => { updateBoxProfile() }, [updateBoxProfile])\n\n  const loadContacts = useCallback(async () => {\n    if(box) {\n      const contacts = await box.openSpace('courier-contacts')\n      await contacts.syncDone\n      setContacts(contacts)\n\n      const existing = await contacts.private.get(addr)\n      if(existing) {\n        setNames(names => [...(new Set(\n          [...(names || []), ...existing.names]\n        ))])\n      } else {\n        alert(`Contact ${addr} Not Found`)\n      }\n    }\n  }, [box])\n\n  useEffect(() => { loadContacts() }, [loadContacts])\n\n  const saveContact = useCallback(async () => {\n    setSaveText(<Loader color='white'/>)\n    await contacts.private.set(addr, {\n      address: addr,\n      names: [...new Set(names.filter(n => n.trim() !== ''))],\n    })\n    setSaveText('Done')\n  }, [contacts])\n\n  return (\n    <Card width='50%' margin='auto'>\n      <Flex flexDirection='row' alignItems='center'>\n        {imageCID && <img className='avatar' src={`//ipfs.io/ipfs/${imageCID}`}/>}\n        <Heading ml={15}>Edit a Contact</Heading>\n      </Flex>\n\n      <ul>\n        <li>\n          <Flex flexDirection='row'>\n            <b>Names:</b>\n            {!names && <Loader title='Loading from 3Box…' mx={2}/>}\n          </Flex>\n          {names &&\n            <ul>\n              {names.map((name, idx) => (\n                <li key={idx}>\n                  <Input ml={2} value={name} my={2}\n                    onChange={(evt) => {\n                      const newName = evt.target.value\n                      setNames(\n                        (names) => [\n                          ...names.slice(0, idx),\n                          newName,\n                          ...names.slice(idx + 1)\n                        ]\n                      )\n                    }}\n                  />\n                  <Button title='Delete' mx={2} variant='danger' icon='Delete'\n                    onClick={() => setNames(names => {\n                      if(names.length === 1) {\n                        return ['']\n                      } else {\n                        return [...names.slice(0, idx), ...names.slice(idx + 1)]\n                      }\n                    })}\n                  />\n                  <Button title='Add' icon='Add'\n                    onClick={() => setNames(names => {\n                      return [...names.slice(0, idx + 1), '', ...names.slice(idx + 1)]\n                    })}\n                  />\n                </li>\n              ))}\n            </ul>\n          }\n        </li>\n        <li><b>ETH Address:</b> {addr}</li>\n        <li>\n          <Flex flexDirection='row'>\n            <b>3Box Profile:</b> {!boxProfile && boxLoader}\n          </Flex>\n          {boxProfile}\n        </li>\n      </ul>\n\n      <Flex justifyContent='flex-end'>\n        <Link to='/contacts'>\n          <Button.Outline mx={2}>Cancel</Button.Outline>\n        </Link>\n        <Button onClick={saveContact} variant='success  '\n          disabled={\n            (names || []).filter(n => n !== '').length === 0\n            || saveText !== 'Save'\n          }\n        >{saveText}</Button>\n        {saveText === 'Done' && <Redirect to='/contacts'/>}\n      </Flex>\n    </Card>\n  )\n}","import React, { useState, useEffect, useCallback } from 'react'\nimport {\n  Button, Flex, Card, Field,\n} from 'rimble-ui'\nimport { v1 as uuidv1 } from 'uuid'\nimport * as base58 from 'bs58'\nimport QRCode from 'qrcode'\nimport { chunk } from '../utils'\nimport { create } from 'ipfs-http-client';\n\nconst links = async (path) => {\n  // const url = 'https://dweb.link/api/v0'\n  const url = 'http://localhost:5001/api/v0'\n  \n  const ipfs = create({ url })\n  const links = []\n  for await (const link of ipfs.ls(path)) {\n    links.push(link)\n  }\n  return links\n}\n\nexport default () => {\n  const [page, setPage] = useState({width: 8.5, height: 11})\n  const [label, setLabel] = useState({width: 2 + 5/8, height: 2})\n  const [innerGutter, setInnerGutter] = useState({width: 1/8, height: 0})\n  const [outerGutter, setOuterGutter] = useState({width: 7/32, height: 15/32})\n  const [data, setData] = useState([])\n  const [images, setImages] = useState([])\n\n  const dpi = 96 // inkscape default\n  const presets = {\n    'Avery 6793 (15×(2\"×2⅝\"))': {\n      page: { width: 8.5, height: 11 },\n      label: { width: 2 + 5/8, height: 2 },\n      outerGutter: { width: 7/32, height: 15/32 },\n      innerGutter: { width: 1/8, height: 0 },\n    },\n    'Avery 6874 (6×(3\"×3¾\"))': {\n      page: { width: 8.5, height: 11 },\n      label: { width: 3 + 3/4, height: 3 },\n      outerGutter: { width: 3/8, height: 5/8 },\n      innerGutter: { width: 1/4, height: 3/8 },\n    },\n  }\n  const setters = {\n    page: setPage, label: setLabel,\n    innerGutter: setInnerGutter, outerGutter: setOuterGutter,\n  }\n\n  useEffect(() => {\n    const load = async () => {\n      setImages(await links('QmT8fxdiii2hagjjTNf5xRwneW5KNopCNQaegLwuyVYZgu'))      \n    }\n    load()       \n  }, [])\n  const genData = useCallback(async () => {\n    const rows = Math.round((page.height - outerGutter.height * 2 + innerGutter.height) / (label.height + innerGutter.height))\n    const cols = Math.round((page.width - outerGutter.width * 2 + innerGutter.width) / (label.width + innerGutter.width))\n\n    const ids = (\n      [...new Array(Math.round(rows * cols))].map(genId)\n    )\n    const qrs = await Promise.all(\n      ids.map((guid) => (\n        new Promise((resolve, reject) => {\n          QRCode.toString(\n            `https://pkg.dhappy.org/#/cel/${guid}`,\n            { margin: 0, errorCorrectionLevel: 'low' },\n            (err, string) => {\n              if(err) throw err\n              resolve(string)\n            }\n          )\n        })\n      ))\n    )\n    const data = ids.map((id, i) => ({ guid: id, qr: qrs[i] }))\n    setData(chunk(data, cols))\n  }, [page, label, outerGutter, innerGutter])\n\n  useEffect(() => { genData() }, [genData])\n\n  const setter = (dim, axis) => (\n    (evt) => {\n      const val = evt.target.value\n      if(!setters[dim]) {\n        console.error(`No Setter For: ${dim}`)\n      } else {\n        setters[dim](old => ({...old, [axis]: val}))\n      }\n    }\n  )\n\n  const genId = () => {\n    const buffer = new Array()\n    const uuid = uuidv1({}, buffer)\n    return base58.encode(buffer)\n  }\n\n  const idView = (guid) => {\n    const rows = chunk(guid, 8)\n    return (\n      <text style={{textAnchor: 'middle', fontFamily: \"'Source Code Pro', monospace\", fontSize: 25}} >\n        {rows.map((r, i) => (\n          <tspan key={i} x={label.height / 2 * dpi} dy={25}>{chunk(r, Math.ceil(r.length / 2)).join('-')}</tspan>\n        ))}\n      </text>\n    )\n  }\n\n  const image = () => {\n    if(images.length > 0) {\n      const selected = images[Math.floor(images.length * Math.random())]\n      return (\n        // <image xlinkHref={`http://ipfs.io/ipfs/${selected.path}`} x=\"3%\" y=\"-1.25%\" height=\"6rem\"/>\n        <image xlinkHref={`http://localhost:8888/ipfs/${selected.path}`} x=\"4%\" y=\"-1.25%\" height=\"6rem\"/>\n      )\n    }\n  }\n\n  const lbl = (datum, row, col) => {\n    const x = (outerGutter.width + col * (label.width + innerGutter.width)) * dpi\n    const y = (outerGutter.height + row * (label.height + innerGutter.height)) * dpi\n    const initY = (outerGutter.height + label.height / 2) * dpi\n    const qrSize = Math.min(label.width, label.height) * 0.8 * dpi\n    return (\n      <g key={datum.guid} transform={`translate(${x}, ${y}) rotate(-90) translate(${-initY}, 0)`}>\n        {/* {idView(datum.guid)} */}\n        {image()}\n        <image\n          width={qrSize} height={qrSize}\n          x={qrSize * 0.22 / 2} y={label.width * dpi - qrSize - qrSize * 0.05}\n          xlinkHref={`data:image/svg+xml;utf8,${encodeURIComponent(datum.qr)}`}\n        />\n      </g>\n    )\n  }\n\n  return (\n    <Flex alignItems='center' flexDirection='column'>\n      <Button onClick={() => links('QmT8fxdiii2hagjjTNf5xRwneW5KNopCNQaegLwuyVYZgu')}> List Images\n      </Button>\n      <Button onClick={() => console.log('HI')}> SAYHI!!\n      </Button>\n      <Card className='config'><Flex flexDirection='column'>\n        <form>\n          <fieldset>\n            <label>Page Size:</label>\n            <input type='number' value={page.width} onChange={setter('page', 'width')}/>\n            <span>×</span>\n            <input value={page.height} onChange={setter('page', 'height')}/>\n          </fieldset>\n          <fieldset>\n            <label>Label:</label>\n            <input value={label.width} onChange={setter('label', 'width')}/>\n            <span>×</span>\n            <input value={label.height} onChange={setter('label', 'height')}/>\n          </fieldset>\n          <fieldset>\n            <label>Outer Gutters:</label>\n            <input value={outerGutter.width} onChange={setter('outerGutter', 'width')}/>\n            <span>×</span>\n            <input value={outerGutter.height} onChange={setter('outerGutter', 'height')}/>\n          </fieldset>\n          <fieldset>\n            <label>Inner Gutters:</label>\n            <input value={innerGutter.width} onChange={setter('innerGutter', 'width')}/>\n            <span>×</span>\n            <input value={innerGutter.height} onChange={setter('innerGutter', 'height')}/>\n          </fieldset>\n        </form>\n        <Field label='Presets:'>\n          <select onChange={(evt) => {\n            const preset = presets[evt.target.value]\n            for(let prop of Object.keys(setters)) {\n              setters[prop](preset[prop])\n            }\n          }}>\n            {Object.keys(presets).map((opt, i) => <option key={i}>{opt}</option>)}\n          </select>\n        </Field>\n      </Flex></Card>\n      <Flex>\n        <svg\n          viewBox={[0, 0, page.width * dpi, page.height * dpi].join(' ')}\n          width={`${page.width}in`} height={`${page.height}in`}\n          transform={`translate(0, ${outerGutter.height * dpi})`}\n        >\n          {data.map((row, ridx) => (\n            row.map((datum, cidx) => lbl(datum, ridx, cidx))\n          ))}\n        </svg>\n      </Flex>\n   </Flex>\n  )\n}","import React, { useEffect, useState, useCallback } from 'react'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport ConnectionBanner from '@rimble/connection-banner'\nimport { MetaMaskButton, Card, Flex } from 'rimble-ui'\nimport Web3 from 'web3'\nimport './App.css'\nimport Main from './Main'\nimport PublicJobs from './Jobs/Public'\nimport PrivateJobs from './Jobs/Private'\nimport Parcels from './Parcels'\nimport ViewParcel from './Parcels/View'\nimport Contracts from './Contracts'\nimport NewContract from './Contracts/New'\nimport Join from './Join'\nimport Overview from './Overview'\nimport Contacts from './Contacts'\nimport NewContact from './Contacts/New'\nimport EditContact from './Contacts/Edit'\nimport Labels from './Labels'\nimport Test3Box from './Test3Box'\n\nexport default () => {\n  const [currentNet, setCurrentNet] = useState()\n  const web3 = new Web3(Web3.givenProvider)\n\n  const setNet = useCallback(async () => {\n    try {\n     setCurrentNet(await web3.eth.net.getId())\n    } catch(err) {\n      console.error('App#setNet', err)\n    }\n  }, [web3.eth.net])\n\n  useEffect(() => { setNet() }, [setNet])\n\n  const mobile = (\n    /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i\n    .test(navigator.userAgent)\n  )\n\n  return (\n    <Router>\n      <ConnectionBanner currentNetwork={currentNet} requiredNetwork={4}>\n        {{\n          notWeb3CapableBrowserMessage: (\n            <Card maxWidth='25em' mx='auto' marginTop='1.5em'>\n              <Flex alignItems='center' flexDirection='column'>\n                <MetaMaskButton\n                  as='a' href='//metamask.app.link/dapp/pkg.dhappy.org'\n                  mx='auto'\n                >\n                  {mobile ? 'Launch in MetaMask' : 'Get Metamask'}\n                </MetaMaskButton>\n              </Flex>\n            </Card>\n          ),\n          noNetworkAvailableMessage: (\n            <Card maxWidth='25em' mx='auto' marginTop='1.5em'>\n              <Flex alignItems='center' flexDirection='column'>\n                <MetaMaskButton\n                  as='a' href='//metamask.io/download.html'\n                  mx='auto'\n                >\n                  {mobile ? 'Launch in MetaMask' : 'Get Metamask'}\n                </MetaMaskButton>\n              </Flex>\n            </Card>\n          ),\n        }}\n      </ConnectionBanner>\n      <Switch>\n        <Route path='/' exact component={Main}/>\n        <Route path='/overview' component={Overview}/>\n        <Route path='/ppl/:address/edit' component={EditContact}/>\n        <Route path='/ppl/new' component={NewContact}/>\n        <Route path='/ppl' component={Contacts}/>\n        <Route path='/jobs/public' component={PublicJobs}/>\n        <Route path='/jobs/private' component={PrivateJobs}/>\n        <Route path='/cel/:guid' component={ViewParcel}/>\n        <Route path='/parcels' component={Parcels}/>\n        <Route path='/contracts/new' component={NewContract} />\n        <Route path='/contracts/:id/join' component={Join} />\n        <Route path='/contracts' component={Contracts} />\n        <Route path='/labels' component={Labels} />\n      </Switch>\n    </Router>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport QrReader from 'react-qr-reader'\nimport './App.css';\n\nexport default (props) => {\n  const handleError = (err) => {\n    alert(err.message)\n  }\n\n  return (\n    <QrReader\n      delay={200}\n      onError={handleError}\n      onScan={props.onScan}\n      style={{ width: '50vw', maxHeight: '50vh' }}\n    />\n  )\n}\n","import React, { useEffect, useState, useCallback } from 'react'\nimport {\n  Map as LeafletMap, Marker, Popup, TileLayer,\n  Circle, Polyline, SVGOverlay\n} from 'react-leaflet'\nimport {\n  Text, Card, Flex, Heading, Button, Input, Table, Loader,\n  Radio, Checkbox, Icon\n} from 'rimble-ui'\nimport { HashLink as Link } from 'react-router-hash-link'\nimport gsap from 'gsap'\nimport ScrollTrigger from 'gsap/ScrollTrigger'\nimport Box from '3box'\nimport Web3 from 'web3'\nimport { v1 as uuidv1 } from 'uuid'\nimport * as base58 from 'bs58'\n//import * as sigUtil from 'eth-sig-util'\nimport IdentityWallet from 'identity-wallet'\nimport { commafy, capitalize, distanceBetween, chunk } from '../utils'\nimport QRReader from '../QRReader'\n\nexport default (props) => {\n  const [type, setType] = useState()\n  const [pos, setPos] = useState({ lat: 53, lng: 12 })\n  const [mark, setMark] = useState(pos)\n  const [r, setBoundsRadius] = useState(200)\n  const [other, setOther] = useState()\n  const [time, setTime] = useState(0)\n  const [contacts, setContacts] = useState()\n  const [bond, setBond] = useState(0)\n  const [did, setDID] = useState()\n  const [couriers, setCouriers] = useState([])\n  const [scanner, setScanner] = useState(false) // show QR code scanner\n  const web3 = new Web3(Web3.givenProvider)\n  \n  const buffer = []\n  uuidv1({}, buffer)\n  let b58 = base58.encode(buffer)\n  const [guid, setGUID] = useState(chunk(b58, 6).join('–'))\n\n  useEffect(() => {\n    ScrollTrigger.register(gsap)\n\n    // let sections = gsap.utils.toArray('.card')\n    // console.info(sections.length)\n    // gsap.to(sections, {\n    //   yPercent: -100 * (sections.length - 1),\n    //   ease: 'none',\n    //   scrollTrigger: {\n    //     trigger: '.cards',\n    //     pin: true,\n    //     scrub: 1,\n    //     snap: 1 / (sections.length - 1),\n    //     // base vertical scrolling on how wide the container is so it feels more natural.\n    //     end: () => \"+=\" + document.querySelector('.cards').offsetWidth\n    //   }\n    // });\n\n    // const tl = gsap.timeline()\n    // tl.from('.map', { xPercent: 20, width: '60%' })\n    // gsap.to(cards[1].current, {\n    //   scrollTrigger: {\n    //     trigger: cards[1].current,\n    //     // enter from bottom, leave top, enter from top, leave bottom\n    //     toggleActions: 'restart pause reverse pause',\n    //     // element top hits viewport center\n    //     start: 'top center',\n    //     end: 'bottom center',\n    //     markers: true,\n    //     scrub: true,\n    //   },\n    //   x: 300, width: '-=600', duration: 2\n    // })\n  }, [])\n\n  const loadContacts = useCallback(async () => {\n    let provider = Web3.givenProvider\n    if(!provider) {\n      provider = window.web3 && window.web3.currentProvider\n    }\n    if(!provider) {\n      throw new Error(\"Couldn't Find an Ethereum Provider.\\n\\nCan't connect to databases.\")\n    }\n    const web3 = new Web3(provider)\n    const user = (await web3.eth.getAccounts())[0]\n    const box = await Box.openBox(user, Web3.givenProvider)\n    setDID(await (await box.openSpace('courier')).DID)\n    const contacts = await box.openSpace('courier-contacts')\n    await contacts.syncDone\n    setContacts(await contacts.private.all())\n  }, [])\n\n  useEffect(() => { loadContacts() }, [loadContacts])\n\n  useEffect(() => {\n    navigator.permissions.query({name: 'geolocation'})\n    .then((result) => {\n      if(result.state === 'granted' || result.state === 'prompt') {\n        const success = (pos) => {\n          const actual = { lat: pos.coords.latitude, lng: pos.coords.longitude }\n          setPos(actual)\n          setMark(actual)\n        }\n        const error = (err) => alert(`Error Getting Current Position: '${err.message}'`)\n        navigator.geolocation.getCurrentPosition(success, error)\n      } else if(result.state === 'denied') {\n        alert(\"Couldn't Access GPS\")\n      } else {\n        alert(`Unknown GPS Code: ${result.state}`)\n      }\n    })\n  }, [])\n\n  useEffect(() => {\n    const hashchange = () => {}\n    window.addEventListener('hashchange', hashchange)\n    return () => window.removeEventListener('hashchange', hashchange)\n  }, [])\n\n  const updateType = (type) => {\n    setType(type)\n  }\n\n  const delta = { lat: mark.lat - pos.lat, lng: mark.lng - pos.lng }\n  const size = Math.sqrt(Math.pow(delta.lat, 2) + Math.pow(delta.lng, 2))\n  const textBounds = [\n    {\n      lat: pos.lat + delta.lat / 2 - 2 * size, \n      lng: pos.lng + delta.lng / 2 - 5 * size,\n    },\n    {\n      lat: pos.lat + delta.lat / 2 + 2 * size, \n      lng: pos.lng + delta.lng / 2 + 5 * size,\n    }\n  ]\n\n  const dragMarker = (evt) => {\n    setMark(evt.latlng)\n    setBoundsRadius(distanceBetween(pos, evt.latlng))\n    setTime(r / 750)\n  }\n\n  const pageIcons = ['Mail', 'Map', 'Info', 'MarkunreadMailbox', 'Dai', 'LocalTaxi', 'Save']\n  const pageDescs = [\n    'Configure whether sending or receiving.',\n    'Choose a waypoint and travel time for meeting the courier.',\n    'Set the package id.',\n    'Choose the party for the other end of your transaction.',\n    'Specify the bond you would like on the delivery.',\n    'Choose couriers to request bids from.',\n    'Review the contract and send it for completion.',\n  ]\n\n  const navbuttons = ({ idx, onBack, onNext, nextAvail = true }) => (\n    <Flex mt={25} mb={10} justifyContent='flex-end' alignItems='center' flexDirection='row'>\n      {[...new Array(pageIcons.length)].map((_, i) =>\n        <Link key={i} to={`#${i + 1}`}>\n          {i + 1 !== idx\n            ? <Button.Outline size='small' icon={pageIcons[i % pageIcons.length]}\n                title={pageDescs[i % pageDescs.length]} px={0} mx={0} mt={0}\n              />\n            : <Button size='small' icon={pageIcons[i % pageIcons.length]}\n                title={pageDescs[i % pageDescs.length]} px={0} mx={1} mt={0}\n              />\n          }\n        </Link>\n      )}\n      <Link to={`#${idx - 1}`}>\n        <Button.Outline onClick={onBack} icon='ArrowBack' mt={3} mx={1}>Back</Button.Outline>\n      </Link>\n      <Link to={`#${idx + 1}`} disabled={!nextAvail}>\n        <Button onClick={onNext} icon='ArrowForward' mt={3} mx={1} disabled={!nextAvail}>Next</Button>\n      </Link>            \n    </Flex>\n  )\n\n  const signContract = async (tract) => {\n    const Domain = [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'chainId', type: 'uint256' },\n      { name: 'salt', type: 'bytes32' },\n    ]\n    const Contract = [\n      { name: 'dropoff', type: 'AnonLocation' },\n      { name: 'pickup', type: 'AnonLocation' },\n      { name: 'bond', type: 'uint256' },\n    ]\n    const AnonLocation = [\n      { name: 'lat', type: 'int64' },\n      { name: 'lng', type: 'int64' },\n      { name: 'travelTime', type: 'uint32' },\n    ]\n\n    const salt = new Uint32Array(16)\n    window.crypto.getRandomValues(salt)\n\n    const data = {\n      domain: {\n        name: 'Courier',\n        version: '0.2.4',\n        chainId: await web3.eth.net.getId(), // 4, // Rinkeby\n        salt: 'https://pkg.dhappy.org', //'0x' + Buffer.from(salt).toString('hex'),\n      },\n      contract: tract,\n    }\n\n    const payload = {\n      types: {\n          EIP712Domain: Domain,\n          Contract,\n          AnonLocation,\n      },\n      domain: data.domain,\n      primaryType: 'Contract',\n      message: data.contract,\n    }\n\n    const user = (\n      await window.ethereum.request({ method: 'eth_requestAccounts' })\n    )[0]\n    const sig = await window.ethereum.request({\n      method: 'eth_signTypedData_v4',\n      params: [user, JSON.stringify(payload)],\n      from: user\n    })\n    payload.signatures = [sig]\n    // const signer = await sigUtil.recoverTypedSignature_v4(\n    //   { data: payload, sig }\n    // )\n    return payload\n  }\n\n  const postToInbox = async (recipient, obj) => {\n    const box = await Box.openBox(recipient, Web3.givenProvider)\n    const app = await box.openSpace('courier')\n    const inbox = await app.joinThread('inbox')\n    await inbox.post(obj)\n  }\n\n  return (\n    <Flex className='cards' flexDirection='column'>\n      <Card id='1' className='card'>\n        <Flex alignItems='center' flexDirection='column'>\n          <Heading>Which are you?</Heading>\n          <Flex flexDirection='row'>\n            <Link to='#2' onClick={() => updateType('pick-up')}>\n              <Button variant={type === 'pick-up' && 'success'} mx='0.5em'>Sender</Button>\n            </Link>\n            <Link to='#2' onClick={() => updateType('dropoff')}>\n              <Button variant={type === 'dropoff' && 'success'} mx='0.5em'>Recipient</Button>\n            </Link>\n          </Flex>\n        </Flex>\n      </Card>\n      <Card id='2' className='card map'>\n        {navbuttons({ idx: 2 })}\n        <Flex alignItems='center' flexDirection='column'>\n          <Heading>Where are you?</Heading>\n          <Text indent='1.5em' fontSize={22}>Your location is anonymized by specifying your distance from a waypoint in terms of travel time.</Text>\n          <Text indent='1.5em' fontSize={22}>Please place your waypoint within ¼ mile of a public road. Once your courier is arranged you will get a chat to orchestrate your parcel pickup. If, for whatever reason, you are unresponsive, the courier will go to the waypoint.</Text>\n          <Text indent='1.5em' fontSize={22}>If they still can't reach you they can register a wait complaint, but they have to be within ¼ mile of the waypoint.</Text>\n          <LeafletMap center={pos} zoom={11} width={0.8} style={{ margin: '1em auto' }}>\n            <TileLayer\n              url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n              attribution='&copy; <a href=\"//osm.org/copyright\">OpenStreetMap</a> contributors'\n            />\n            <Marker position={mark} draggable={true} onDrag={dragMarker}>\n              <Popup>{`${capitalize(type)} Waypoint`}</Popup>\n            </Marker>\n            <Circle center={pos} radius={r}/>\n            <Polyline positions={[pos, mark]}/>\n            <SVGOverlay bounds={textBounds}>\n              <text x=\"50%\" y=\"50%\" fill='black' fontSize={25} stroke='black' textAnchor='middle'>{time && `${time.toFixed(1)}min`}</text>\n            </SVGOverlay>\n          </LeafletMap>\n          <Flex alignItems='center' flexDirection='row'>\n            <Text mx='0.5em'>{`${capitalize(type)} Waypoint:`}</Text>\n            <Input\n              type='number'\n              value={mark.lat}\n              onChange={(evt) => {\n                const lat = (\n                  evt.target.value !== '' ? parseFloat(evt.target.value) : pos.lat\n                )\n                dragMarker({ latlng: {...mark, lat } })\n              }}\n            />\n            <Text fontSize='200%'>×</Text>\n            <Input\n              type='number'\n              value={mark.lng}\n              onChange={(evt) => {\n                const lng = (\n                  evt.target.value !== '' ? parseFloat(evt.target.value) : pos.lng\n                )\n                dragMarker({ latlng: {...mark, lng } })\n              }}\n            />\n          </Flex>\n          <Flex alignItems='center' flexDirection='row' mt={3}>\n            <Text mx='0.5em'>\n              {`Time to ${type === 'pick-up' ? 'Sender' : 'Recipient'}:`}\n            </Text>\n            <Input\n              width='4em'\n              type='number'\n              value={Math.ceil(time || 0)}\n              onChange={(evt) => {\n                const when = (\n                  evt.target.value !== '' ? parseFloat(evt.target.value) : time\n                )\n                setTime(when)\n              }}\n            />\n            <Text>minute{time === 1 ? '' : 's'}</Text>\n          </Flex>\n        </Flex>\n      </Card>\n      <Card id='3' className='card'>\n        {navbuttons({ idx: 3 })}\n        <Flex alignItems='center' flexDirection='column'>\n          <Heading>What is the package id?</Heading>\n          <Text fontSize={22}>Every parcel in the network has a unique identifier that should be <Link to='/labels'>scannable as a QR code</Link> or NFC tag. Barring that, the id should be written on the package.</Text>\n          <Flex alignItems='center' flexDirection='row'>\n            <Input width='35ch' value={guid} textAlign='center' onChange={evt => setGUID(evt.target.value)} />\n            <Button icon='Pages' title='Scan QR Code' onClick={() => setScanner(true)}/>\n          </Flex>\n          {scanner &&\n            <Card>\n              <QRReader onScan={(data) => {\n                if(data) {\n                  const match = data.match(/^(https?:)?\\/\\/pkg.dhappy.org\\/(#\\/)?cel\\/([^/]+)/i)\n                  if(match) {\n                    setGUID(match[3])\n                    setScanner(false)\n                  }\n                }\n              }}/>\n            </Card>\n          }\n        </Flex>\n      </Card>\n      <Card id='4' className='card'>\n        {navbuttons({ idx: 4 })}\n        <Flex alignItems='center' flexDirection='column'>\n          <Heading>Who are you {type === 'pick-up' ? 'sending it to' : 'getting it from'}?</Heading>\n          {!contacts\n            ? <>\n              <Heading>Loading Contacts</Heading>\n              <Loader/>\n            </>\n            :(\n              <Table>\n                <thead><tr><th>Select</th><th>Names</th></tr></thead>\n                <tbody>\n                  {Object.entries(contacts).map(([addr, contact]) => (\n                    <tr key={addr} style={{ cursor: 'pointer' }}>\n                      <td><Radio checked={other === contact}\n                        onChange={(evt) => {\n                          // Is getting called twice\n                          setOther((other) => {\n                            console.info(other, contact, other === contact)\n                            return other !== contact ? contact : null\n                          })\n                        }}\n                      /></td>\n                      <td onClick={() => setOther(contact)}>{commafy(contact.names)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            )\n          }\n        </Flex>\n      </Card>\n      <Card id='5' className='card'>\n        {navbuttons({ idx: 5 })}\n        <Flex alignItems='center' flexDirection='column'>\n          <Heading>What bond do you want on the delivery?</Heading>\n          <Text indent='1.5em' fontSize={22}>Couriers stake a bond as insurance for their good faith. If your courier fails to check in at a waypoint or receive a delivery receipt, this is the what you get to cover your loss.</Text>\n          <Flex alignItems='center' flexDirection='row'>\n            <Input\n              my={3}\n              type='number'\n              value={bond}\n              onChange={(evt) => {\n                const bond = (\n                  evt.target.value !== '' ? parseFloat(evt.target.value) : 0\n                )\n                if(bond < 0) bond *= -1\n                setBond(bond)\n              }}\n            />\n            <Text ml={2}><Icon name='Dai'/> DAI</Text>\n          </Flex>\n        </Flex>\n      </Card>\n      <Card id='6' className='card'>\n        {navbuttons({ idx: 6 })}\n        <Flex alignItems='center' flexDirection='column'>\n          <Heading>Choose Couriers</Heading>\n          <Text indent='1.5em' fontSize='15pt'>These couriers will be notified of your contract and given an opportunity to bid.</Text>\n          {!contacts\n            ? <>\n              <Heading>Loading Contacts</Heading>\n              <Loader/>\n            </>\n            :(\n              <Table>\n                <thead><tr><th>Select</th><th>Names</th></tr></thead>\n                <tbody>\n                  {Object.entries(contacts).map(([addr, contact]) => (\n                    <tr key={addr}>\n                      <td><Checkbox checked={couriers.includes(contact)}\n                        onChange={(evt) => {\n                          if(evt.target.checked) {\n                            setCouriers(cs => [...new Set([...cs, contact])])\n                          } else {\n                            setCouriers(cs => cs.filter(c => c !== contact))\n                          }\n                        }}\n                      /></td>\n                      <td onClick={(evt) => {\n                        setCouriers(cs => {\n                          if(cs.includes(contact)) {\n                            return cs.filter(c => c !== contact)\n                          } else {\n                            return [...new Set([...cs, contact])]\n                          }\n                        })\n                      }}>{commafy(contact.names)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            )\n          }\n        </Flex>\n      </Card>\n      <Card id='7' className='card'>\n        {navbuttons({ idx: 7, nextAvail: type !== undefined,\n          onNext: async (evt) => {\n            let provider = Web3.givenProvider\n            if(!provider) {\n              provider = window.web3 && window.web3.currentProvider\n            }\n            if(!provider) {\n              throw new Error(\"Couldn't Find an Ethereum Provider.\\n\\nCan't connect to databases.\")\n            }\n            const web3 = new Web3(provider)\n            const user = (await web3.eth.getAccounts())[0]\n                  const box = await Box.openBox(user, Web3.givenProvider)\n            const parcels = await box.openSpace('courier')\n            await parcels.waitSync\n            const guidBytes = base58.decode(guid.replace(/-/g, ''))\n            const digest = await crypto.subtle.digest('SHA-256', guidBytes)\n            const hash = base58.encode(Buffer.from(digest))\n            const threadName = `bids-${hash}`\n            const thread = await parcels.createConfidentialThread(threadName)\n            const contract = {\n              bond: (bond || 0) * Math.pow(10, 18),\n              [type]: {\n                contact: did,\n                lat: Math.round(mark.lat * Math.pow(10, 6)),\n                lng: Math.round(mark.lng * Math.pow(10, 6)),\n                travelTime: Math.round(time * 60),\n              },\n            }\n            console.info('TCT', contract)\n            await thread.post({ contract })\n            await thread.addMember(other.address)\n            const creator = user\n            await postToInbox(other.address, { awaiting: thread.address, creator })\n            for(let courier of couriers) {\n              await thread.addMember(courier.address)\n              await postToInbox(courier.address, { contract: thread.address, creator })\n              console.info(courier)\n            }\n            const posts = await thread.getPosts()\n            console.info(posts)\n          }\n        })}\n        <Flex alignItems='center' flexDirection='column'>\n          <Heading>Get {type === 'pick-up' ? 'Recipient' : 'Sender'} Information</Heading>\n          {!type\n            ? <Text fontSize={22}>You need to specify <Link to='#1'>whether you are sending or receiving</Link>.</Text>\n            : (!other\n              ? <Text fontSize={22}>You have not <Link to='#4'>selected the other party</Link>.</Text>\n              : <Text fontSize={22}>The contract will now be sent to {other.names[0]} for their location information. {couriers.length > 0 && 'Links to the bidding database will be sent to the following couriers for bids:'}</Text>\n            )\n          }\n        </Flex>\n        {type && other &&\n          <Flex alignItems='start' flexDirection='column'>\n            <ul>\n              {couriers.map((c, i) => <li key={i}>{commafy(c.names)}</li>)}\n            </ul>\n          </Flex>\n        }\n      </Card>\n    </Flex>\n  )\n}"],"sourceRoot":""}